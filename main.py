
import telebot
from telebot import types
from datetime import datetime, timedelta
import json
import os

TOKEN = "YOUR_BOT_TOKEN"
bot = telebot.TeleBot(TOKEN)

# === –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ === #
allowed_users = set()
used_codes = set()
user_progress = {}
user_reminders = {}
user_scenarios = {}
codes = {"ABC123": "Digital", "XYZ456": "Lite"}  # –ü—Ä–∏–º–µ—Ä –∫–æ–¥—ñ–≤ –¥–æ—Å—Ç—É–ø—É

# === –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (1-–π —Ä—ñ–≤–µ–Ω—å) === #
command_list = [
    "touch", "moon", "kiss", "hot", "fire", "love", "yes", "secret", "open", "lock",
    "mine", "blind", "claim", "tease", "wild", "slide", "whisper", "catch", "freeze", "hunt"
]

command_responses = {
    "touch": "–ù–µ –ø–∏—Ç–∞–π ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–æ—Ä–∫–Ω–∏—Å—å. –¢–∞–º, –¥–µ —Ç–æ–±—ñ —Ö–æ—á–µ—Ç—å—Å—è.",
    "moon": "–¢–æ—Ä–∫–Ω–∏—Å—å —Ç—ñ–ª—å–∫–∏ –Ω–æ—Å–æ–º. –í–µ–¥–∏ –ª—ñ–Ω—ñ—é –ø–æ–≤—ñ–ª—å–Ω–æ. –ì—É–±–∞–º ‚Äî –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.",
    "kiss": "–¢—Ä–∏ –ø–æ—Ü—ñ–ª—É–Ω–∫–∏. –¢–∞–º, –¥–µ —è –Ω–µ —á–µ–∫–∞—é. –¢—ñ–ª—å–∫–∏ –Ω–µ –Ω–∞ –≥—É–±–∞—Ö.",
    "hot": "–ó—Ä–æ–±–∏ –≥–∞—Ä—è—á—ñ—à–µ. –¢–∏ –º–∞—î—à —Ç—Ä–∏ —Ä—É—Ö–∏ ‚Äî —ñ –∂–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞.",
    "fire": "–ó–Ω—ñ–º–∏ —â–æ—Å—å —ñ–∑ –º–µ–Ω–µ. –°–∫–∞–∂–∏: ‚Äú–ú–æ—î‚Äù.",
    "love": "–®–µ–ø–æ—á–∏ –º–µ–Ω—ñ. –ê –ø–æ—Ç—ñ–º ‚Äî –∑—Ä–æ–±–∏ –Ω–∞–≤–ø–∞–∫–∏.",
    "yes": "–°–∫–∞–∂–∏ —Ü–µ —Ç–∞–∫, —è–∫ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –≥–æ–≤–æ—Ä–∏–≤. –ü–æ—Ç—ñ–º –ø–æ–∫–∞–∂–∏.",
    "secret": "–ù–∞—à —Å–µ–∫—Ä–µ—Ç ‚Äî —É —Ü—å–æ–º—É –¥–æ—Ç–∏–∫—É.",
    "open": "–í—ñ–¥—á–∏–Ω–∏. –ú–æ–∂–Ω–∞ –ª–∏—à–µ –≥—É–±–∞–º–∏.",
    "lock": "–ó–∞–º–∫–Ω–∏ –º–µ–Ω–µ. –û—á–∏–º–∞. –†—É–∫–∞–º–∏. –í—Å—ñ–º —Ç—ñ–ª–æ–º.",
    "mine": "–ü—Ä–∏—Ç–∏—Å–Ω–∏ –¥–æ —Å–µ–±–µ. –°–∫–∞–∂–∏, —â–æ —Ç–≤–æ—î.",
    "blind": "–ó–∞—á–∏–Ω–∏ –º–µ–Ω—ñ –æ—á—ñ. –Ü —Ç–≤–æ—Ä–∏ –±–µ–∑ –∑–æ—Ä—É.",
    "claim": "–£–∫—É—Å–∏. –ù—ñ–∂–Ω–æ. –Ü –Ω–µ –∑—É–ø–∏–Ω—è–π—Å—è.",
    "tease": "–î—Ä–∞–∑–Ω–∏. –ê–ª–µ –Ω–µ –¥–∞–≤–∞–π –æ–¥—Ä–∞–∑—É.",
    "wild": "–¢–µ–ø–µ—Ä —Ö–∏–∂–∞–∫–æ–º —Å—Ç–∞–Ω—É —è. –ù–µ —Å—Ç—Ä–∏–º—É–π –º–µ–Ω–µ.",
    "slide": "–ü—Ä–æ–≤–µ–¥–∏ –¥–æ–ª–æ–Ω–µ—é. –ù–∏–∂—á–µ.",
    "whisper": "–°–∫–∞–∂–∏ –º–µ–Ω—ñ —â–æ—Å—å, —â–æ –∑–±—É–¥–∂—É—î –ª–∏—à–µ —Ç–µ–±–µ.",
    "catch": "–°–ø—ñ–π–º–∞–π. –Ü —Ç—Ä–∏–º–∞–π.",
    "freeze": "–ó–∞—Å—Ç–∏–≥–Ω–∏. –Ø —Ö–æ—á—É —Ä–æ–∑–¥–∏–≤–∏—Ç–∏—Å—è.",
    "hunt": "–ó–Ω–∞–π–¥–∏ —Ç–µ, —á–æ–≥–æ —â–µ –Ω–µ –±—É–ª–æ."
}

# === –û–±—Ä–æ–±–∫–∞ /start === #
@bot.message_handler(commands=["start"])
def handle_start(message):
    user_id = message.from_user.id
    if user_id in allowed_users:
        bot.send_message(user_id, "ü¶ä –ì—Ä–∞ –ø–æ—á–∞–ª–∞—Å—å!

–ü–∏—à–∏ —Å–ª–æ–≤–æ –Ω–∞ —Å–≤–æ—î–º—É —Ç—ñ–ª—ñ. –ü–∞—Ä—Ç–Ω–µ—Ä ‚Äî –∑–Ω–∞—Ö–æ–¥–∏—Ç—å. –í–≤–æ–¥–∏—Ç—å —Å—é–¥–∏. –ê Foxie –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î‚Ä¶ –±–∞–∂–∞–Ω–Ω—è–º üòà")
        user_progress[user_id] = []
        user_scenarios[user_id] = 1
    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–í –º–µ–Ω–µ —î –∫–æ–¥ –¥–æ—Å—Ç—É–ø—É", callback_data="enter_code"))
        bot.send_message(user_id, "–ü—Ä–∏–≤—ñ—Ç! –¶–µ Foxie Code ‚Äî –≥—Ä–∞ –¥–ª—è –≤–∞—Å —ñ –≤–∞—à–æ—ó –ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç—ñ ü¶ä

–©–æ–± –ø–æ—á–∞—Ç–∏, –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–æ—Å—Ç—É–ø.", reply_markup=markup)

# === –ö–æ–¥ –¥–æ—Å—Ç—É–ø—É === #
@bot.callback_query_handler(func=lambda call: call.data == "enter_code")
def prompt_access_code(call):
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ —Å–≤—ñ–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø—É:")

@bot.message_handler(func=lambda m: m.text in codes and m.from_user.id not in allowed_users)
def process_code(message):
    code = message.text.strip()
    user_id = message.from_user.id
    if code in used_codes:
        bot.send_message(user_id, "–¶–µ–π –∫–æ–¥ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ ü¶ä")
    else:
        allowed_users.add(user_id)
        used_codes.add(code)
        user_progress[user_id] = []
        user_scenarios[user_id] = 1
        bot.send_message(user_id, "–î–æ—Å—Ç—É–ø –Ω–∞–¥–∞–Ω–æ! –¢–≤–æ—è –ø—Ä–∏–≥–æ–¥–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑ ü¶ä")
        handle_start(message)

# === –ö–æ–º–∞–Ω–¥–∏ –≥—Ä–∏ === #
@bot.message_handler(func=lambda message: message.from_user.id in allowed_users)
def game_logic(message):
    user_id = message.from_user.id
    word = message.text.strip().lower()

    scenario = user_scenarios.get(user_id, 1)
    progress = user_progress.setdefault(user_id, [])

    if scenario == 1:
        if word in command_list and word not in progress:
            progress.append(word)
            bot.send_message(user_id, command_responses[word])
            if len(progress) == 20:
                bot.send_message(user_id, "Foxie –∑ –≤–∞–º–∏ –ø—Ä–æ—â–∞—î—Ç—å—Å—è‚Ä¶ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –≥—Ä–∏.")
        elif word in progress:
            bot.send_message(user_id, "ü¶ä –¶—é –∫–æ–º–∞–Ω–¥—É –≤–∂–µ –±—É–ª–æ. –°–ø—Ä–æ–±—É–π —ñ–Ω—à—É!")
        else:
            bot.send_message(user_id, "–ü—Ñ—Ñ‚Ä¶ –¢–∞–∫–æ—ó –∫–æ–º–∞–Ω–¥–∏ –≤ –º–µ–Ω–µ –Ω–µ–º–∞—î ü¶ä –°–ø—Ä–æ–±—É–π —â–µ")

# === /add ‚Äî –¥–æ–¥–∞—Ç–∏ –≤—Ä—É—á–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ === #
@bot.message_handler(commands=["add"])
def manual_add(message):
    if str(message.from_user.id) != "572069105":
        return
    try:
        target_id = int(message.text.split()[1])
        allowed_users.add(target_id)
        bot.send_message(message.chat.id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_id} –¥–æ–¥–∞–Ω–æ ü¶ä")
    except:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π /add ID")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ === #
print("Foxie Bot is running...")
bot.polling()
